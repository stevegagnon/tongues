// from http://www.p01.org/JS1K_Speech_Synthesizer/

let osc = [
  v => Math.sin(v * 6.283184), // sine
  v => (v % 1) < 0.5 ? 1 : -1, // square
  v => 2 * (v % 1) - 1, // sawtooth
  v => { let v2 = (v % 1) * 4; return v2 < 2 ? v2 - 1 : 3 - v2 }, // triangle
];

export default function renderVoice(M, buffer) {
  let out = [];
  let [t, j, h, f, g, l, k, s, i, m] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  const pa = {
    o: [52, 55, 10, 10, 6],
    i: [45, 96, 10, 10, 3],
    j: [45, 96, 10, 10, 3],
    u: [45, 54, 10, 10, 3],
    a: [58, 70, 10, 10, 15],
    e: [54, 90, 10, 10, 15],
    E: [60, 80, 10, 10, 12],
    w: [43, 54, 10, 10, 1],
    v: [42, 60, 20, 10, 3],
    T: [42, 60, 40, 1, 5],
    z: [45, 68, 10, 5, 3],
    Z: [44, 70, 50, 1, 5],
    b: [44, 44, 10, 10, 2],
    d: [44, 99, 10, 10, 2],
    m: [44, 60, 10, 10, 2],
    n: [44, 99, 10, 10, 2],
    r: [43, 50, 30, 8, 3],
    l: [48, 60, 10, 10, 5],
    g: [42, 50, 15, 5, 1],
    f: [48, 60, 10, 10, 4, 1],
    h: [62, 66, 30, 10, 10, 1],
    s: [120, 150, 80, 40, 5, 1],
    S: [20, 70, 99, 99, 10, 1],
    p: [44, 50, 5, 10, 2, 1],
    t: [44, 60, 10, 20, 3, 1],
    k: [60, 99, 10, 10, 6, 1]
  }


  for (; s < M.length; s += 1 / 10000) {
    var p = pa[M[0 | s]];
    f = g; g = h;
    j = k; k = l;

    if (p) {
      i = 1 - p[2] / 255
      m = 1 - p[3] / 255
      h = i * (g * 2 * osc[0]((p[0] / 25) / 6.283184) - i * f) + (s * 8 % 1) - .5
      l = m * (k * 2 * osc[0]((p[1] / 25) / 6.283184) - m * j) + (s * 8 % 1) - .5
      out.push(
        (
          (h + l) * p[4]
          + (g + k) / 2
          + (f + j) / 8
        ) / 128);
    }
  }
  return [out];
}
